<?php
/**
 * ShipmentTrackingWebhookPushPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Model;

use \ArrayAccess;
use \AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ShipmentTrackingWebhookPushPayload Class Doc Comment
 *
 * @category Class
 * @description Shipment Tracking Webhook Push Payload &lt;br /&gt;This is used in the following: &lt;br /&gt;1. MCSS.Trackings to POST a dummy push payload when a user tests their customer webhook configuration from the website &lt;br /&gt;2. MCSS.TrackingWebhook Sender to POST genuine tracking information to a customer&#x27;s webhook &lt;br /&gt;3. MCSS.Api to serve as the schema for a fake API endpoint documenting the shape of the push payload data, so that the customer can design their webhook
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentTrackingWebhookPushPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentTrackingWebhookPushPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tracking_number' => 'string',
        'shipment_id' => 'string',
        'shipper_reference' => 'string',
        'carrier_code' => 'string',
        'milestone' => 'string',
        'milestone_date_time' => 'string',
        'events' => '\AdamToms\RoyalMailV4\Model\ShipmentTrackingWebhookPushPayloadEvent[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tracking_number' => null,
        'shipment_id' => 'uuid',
        'shipper_reference' => null,
        'carrier_code' => null,
        'milestone' => null,
        'milestone_date_time' => null,
        'events' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tracking_number' => 'TrackingNumber',
        'shipment_id' => 'ShipmentId',
        'shipper_reference' => 'ShipperReference',
        'carrier_code' => 'CarrierCode',
        'milestone' => 'Milestone',
        'milestone_date_time' => 'MilestoneDateTime',
        'events' => 'Events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tracking_number' => 'setTrackingNumber',
        'shipment_id' => 'setShipmentId',
        'shipper_reference' => 'setShipperReference',
        'carrier_code' => 'setCarrierCode',
        'milestone' => 'setMilestone',
        'milestone_date_time' => 'setMilestoneDateTime',
        'events' => 'setEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tracking_number' => 'getTrackingNumber',
        'shipment_id' => 'getShipmentId',
        'shipper_reference' => 'getShipperReference',
        'carrier_code' => 'getCarrierCode',
        'milestone' => 'getMilestone',
        'milestone_date_time' => 'getMilestoneDateTime',
        'events' => 'getEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
        $this->container['shipper_reference'] = isset($data['shipper_reference']) ? $data['shipper_reference'] : '';
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['milestone'] = isset($data['milestone']) ? $data['milestone'] : '';
        $this->container['milestone_date_time'] = isset($data['milestone_date_time']) ? $data['milestone_date_time'] : '';
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tracking_number'] === null) {
            $invalidProperties[] = "'tracking_number' can't be null";
        }
        if ($this->container['shipment_id'] === null) {
            $invalidProperties[] = "'shipment_id' can't be null";
        }
        if ($this->container['carrier_code'] === null) {
            $invalidProperties[] = "'carrier_code' can't be null";
        }
        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Tracking Number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id Shipment Id <br />The shipment identifier as returned from creating shipments or from the trackings API endpoint.
     *
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets shipper_reference
     *
     * @return string
     */
    public function getShipperReference()
    {
        return $this->container['shipper_reference'];
    }

    /**
     * Sets shipper_reference
     *
     * @param string $shipper_reference Shipper Reference <br />The shipper reference, as provided at the time the shipment was created or registered with the trackings API endpoint, or from the tracking event information (if available) if not supplied on shipment creation.
     *
     * @return $this
     */
    public function setShipperReference($shipper_reference)
    {
        $this->container['shipper_reference'] = $shipper_reference;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code Carrier Code
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return string
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param string $milestone Milestone <br />Either an empty string if the tracking event does not correspond to a milestone and no milestones have been triggered for the shipment, or else one of the following: <br /> <br />- COLLECTED <br />- DELIVERED <br />- DELIVERY ATTEMPT FAILED <br />- IN CUSTOMS <br />- IN TRANSIT <br />- IT'S ON IT'S WAY <br />- OUT FOR DELIVERY <br />- PART DELIVERED <br />- READY FOR COLLECTION <br />- TRANSIT DELAY <br />- UNDELIVERABLE
     *
     * @return $this
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets milestone_date_time
     *
     * @return string
     */
    public function getMilestoneDateTime()
    {
        return $this->container['milestone_date_time'];
    }

    /**
     * Sets milestone_date_time
     *
     * @param string $milestone_date_time Milestone Date/Time <br />Either an empty string if the tracking event does not correspond to a milestone and no milestones have been triggered for the shipment, or the milestone date and time. <br />Format: YYYY-MM-DD HH:MM:SS
     *
     * @return $this
     */
    public function setMilestoneDateTime($milestone_date_time)
    {
        $this->container['milestone_date_time'] = $milestone_date_time;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \AdamToms\RoyalMailV4\Model\ShipmentTrackingWebhookPushPayloadEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \AdamToms\RoyalMailV4\Model\ShipmentTrackingWebhookPushPayloadEvent[] $events Events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
