<?php
/**
 * ManifestResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Model;

use \ArrayAccess;
use \AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ManifestResponse Class Doc Comment
 *
 * @category Class
 * @description Manifest Response
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManifestResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ManifestResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manifest_image' => 'string',
        'manifest_number' => 'string',
        'carrier_code' => 'string',
        'service' => 'string',
        'total_weight' => 'double',
        'weight_unit_of_measure' => '\AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure',
        'total_shipments' => 'int',
        'total_items' => 'int',
        'manifest_date' => '\DateTime',
        'created_date_utc' => '\DateTime',
        'shipping_location' => '\AdamToms\RoyalMailV4\Model\ManifestShippingLocation',
        'shipping_account' => '\AdamToms\RoyalMailV4\Model\ManifestShippingAccount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'manifest_image' => null,
        'manifest_number' => null,
        'carrier_code' => null,
        'service' => null,
        'total_weight' => 'double',
        'weight_unit_of_measure' => null,
        'total_shipments' => 'int32',
        'total_items' => 'int32',
        'manifest_date' => 'date',
        'created_date_utc' => 'date-time',
        'shipping_location' => null,
        'shipping_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manifest_image' => 'ManifestImage',
        'manifest_number' => 'ManifestNumber',
        'carrier_code' => 'CarrierCode',
        'service' => 'Service',
        'total_weight' => 'TotalWeight',
        'weight_unit_of_measure' => 'WeightUnitOfMeasure',
        'total_shipments' => 'TotalShipments',
        'total_items' => 'TotalItems',
        'manifest_date' => 'ManifestDate',
        'created_date_utc' => 'CreatedDateUtc',
        'shipping_location' => 'ShippingLocation',
        'shipping_account' => 'ShippingAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manifest_image' => 'setManifestImage',
        'manifest_number' => 'setManifestNumber',
        'carrier_code' => 'setCarrierCode',
        'service' => 'setService',
        'total_weight' => 'setTotalWeight',
        'weight_unit_of_measure' => 'setWeightUnitOfMeasure',
        'total_shipments' => 'setTotalShipments',
        'total_items' => 'setTotalItems',
        'manifest_date' => 'setManifestDate',
        'created_date_utc' => 'setCreatedDateUtc',
        'shipping_location' => 'setShippingLocation',
        'shipping_account' => 'setShippingAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manifest_image' => 'getManifestImage',
        'manifest_number' => 'getManifestNumber',
        'carrier_code' => 'getCarrierCode',
        'service' => 'getService',
        'total_weight' => 'getTotalWeight',
        'weight_unit_of_measure' => 'getWeightUnitOfMeasure',
        'total_shipments' => 'getTotalShipments',
        'total_items' => 'getTotalItems',
        'manifest_date' => 'getManifestDate',
        'created_date_utc' => 'getCreatedDateUtc',
        'shipping_location' => 'getShippingLocation',
        'shipping_account' => 'getShippingAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manifest_image'] = isset($data['manifest_image']) ? $data['manifest_image'] : null;
        $this->container['manifest_number'] = isset($data['manifest_number']) ? $data['manifest_number'] : null;
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['total_weight'] = isset($data['total_weight']) ? $data['total_weight'] : null;
        $this->container['weight_unit_of_measure'] = isset($data['weight_unit_of_measure']) ? $data['weight_unit_of_measure'] : null;
        $this->container['total_shipments'] = isset($data['total_shipments']) ? $data['total_shipments'] : null;
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
        $this->container['manifest_date'] = isset($data['manifest_date']) ? $data['manifest_date'] : null;
        $this->container['created_date_utc'] = isset($data['created_date_utc']) ? $data['created_date_utc'] : null;
        $this->container['shipping_location'] = isset($data['shipping_location']) ? $data['shipping_location'] : null;
        $this->container['shipping_account'] = isset($data['shipping_account']) ? $data['shipping_account'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['manifest_image'] === null) {
            $invalidProperties[] = "'manifest_image' can't be null";
        }
        if ($this->container['manifest_number'] === null) {
            $invalidProperties[] = "'manifest_number' can't be null";
        }
        if ($this->container['carrier_code'] === null) {
            $invalidProperties[] = "'carrier_code' can't be null";
        }
        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if ($this->container['total_weight'] === null) {
            $invalidProperties[] = "'total_weight' can't be null";
        }
        if ($this->container['weight_unit_of_measure'] === null) {
            $invalidProperties[] = "'weight_unit_of_measure' can't be null";
        }
        if ($this->container['total_shipments'] === null) {
            $invalidProperties[] = "'total_shipments' can't be null";
        }
        if ($this->container['total_items'] === null) {
            $invalidProperties[] = "'total_items' can't be null";
        }
        if ($this->container['manifest_date'] === null) {
            $invalidProperties[] = "'manifest_date' can't be null";
        }
        if ($this->container['created_date_utc'] === null) {
            $invalidProperties[] = "'created_date_utc' can't be null";
        }
        if ($this->container['shipping_location'] === null) {
            $invalidProperties[] = "'shipping_location' can't be null";
        }
        if ($this->container['shipping_account'] === null) {
            $invalidProperties[] = "'shipping_account' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manifest_image
     *
     * @return string
     */
    public function getManifestImage()
    {
        return $this->container['manifest_image'];
    }

    /**
     * Sets manifest_image
     *
     * @param string $manifest_image Manifest - Base 64 encoded PDF
     *
     * @return $this
     */
    public function setManifestImage($manifest_image)
    {
        $this->container['manifest_image'] = $manifest_image;

        return $this;
    }

    /**
     * Gets manifest_number
     *
     * @return string
     */
    public function getManifestNumber()
    {
        return $this->container['manifest_number'];
    }

    /**
     * Sets manifest_number
     *
     * @param string $manifest_number Manifest Number
     *
     * @return $this
     */
    public function setManifestNumber($manifest_number)
    {
        $this->container['manifest_number'] = $manifest_number;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code Carrier Code <br />The carrier that this manifest is for.
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service Service <br />The service included in this Manifest. If more than one, Mixed will be returned.
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return double
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param double $total_weight Total Weight <br />Sum of the weight of all shipments included on the Manifest.
     *
     * @return $this
     */
    public function setTotalWeight($total_weight)
    {
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets weight_unit_of_measure
     *
     * @return \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure
     */
    public function getWeightUnitOfMeasure()
    {
        return $this->container['weight_unit_of_measure'];
    }

    /**
     * Sets weight_unit_of_measure
     *
     * @param \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure $weight_unit_of_measure weight_unit_of_measure
     *
     * @return $this
     */
    public function setWeightUnitOfMeasure($weight_unit_of_measure)
    {
        $this->container['weight_unit_of_measure'] = $weight_unit_of_measure;

        return $this;
    }

    /**
     * Gets total_shipments
     *
     * @return int
     */
    public function getTotalShipments()
    {
        return $this->container['total_shipments'];
    }

    /**
     * Sets total_shipments
     *
     * @param int $total_shipments Total Shipments <br />The total number of shipments included on this Manifest.
     *
     * @return $this
     */
    public function setTotalShipments($total_shipments)
    {
        $this->container['total_shipments'] = $total_shipments;

        return $this;
    }

    /**
     * Gets total_items
     *
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     *
     * @param int $total_items Total Items <br />The total number of items (packages) included on this Manifest.
     *
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets manifest_date
     *
     * @return \DateTime
     */
    public function getManifestDate()
    {
        return $this->container['manifest_date'];
    }

    /**
     * Sets manifest_date
     *
     * @param \DateTime $manifest_date Manifest Date <br />The date on the manifest.
     *
     * @return $this
     */
    public function setManifestDate($manifest_date)
    {
        $this->container['manifest_date'] = $manifest_date;

        return $this;
    }

    /**
     * Gets created_date_utc
     *
     * @return \DateTime
     */
    public function getCreatedDateUtc()
    {
        return $this->container['created_date_utc'];
    }

    /**
     * Sets created_date_utc
     *
     * @param \DateTime $created_date_utc Created Date UTC <br />The date the manifest was originally created.
     *
     * @return $this
     */
    public function setCreatedDateUtc($created_date_utc)
    {
        $this->container['created_date_utc'] = $created_date_utc;

        return $this;
    }

    /**
     * Gets shipping_location
     *
     * @return \AdamToms\RoyalMailV4\Model\ManifestShippingLocation
     */
    public function getShippingLocation()
    {
        return $this->container['shipping_location'];
    }

    /**
     * Sets shipping_location
     *
     * @param \AdamToms\RoyalMailV4\Model\ManifestShippingLocation $shipping_location shipping_location
     *
     * @return $this
     */
    public function setShippingLocation($shipping_location)
    {
        $this->container['shipping_location'] = $shipping_location;

        return $this;
    }

    /**
     * Gets shipping_account
     *
     * @return \AdamToms\RoyalMailV4\Model\ManifestShippingAccount
     */
    public function getShippingAccount()
    {
        return $this->container['shipping_account'];
    }

    /**
     * Sets shipping_account
     *
     * @param \AdamToms\RoyalMailV4\Model\ManifestShippingAccount $shipping_account shipping_account
     *
     * @return $this
     */
    public function setShippingAccount($shipping_account)
    {
        $this->container['shipping_account'] = $shipping_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
