<?php
/**
 * RoyalMailDataStreamDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0-RM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Model;

use \ArrayAccess;
use \AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * RoyalMailDataStreamDetails Class Doc Comment
 *
 * @category Class
 * @description DATASTREAM Details &lt;br /&gt;The information needed to create your own label. &lt;br /&gt;Only present if DATASTREAM label format was specified.
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoyalMailDataStreamDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoyalMailDataStreamDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'primary2_d_barcode_image' => 'string',
        'primary2_d_barcode_data' => 'string',
        'formatted_unique_id' => 'string',
        'gazetteer_codes' => '\AdamToms\RoyalMailV4\Model\RoyalMailGazetteerCodes',
        'primary1_d_barcode_image' => 'string',
        'primary1_d_barcode_data' => 'string',
        'high_volume_barcode_image' => 'string',
        'high_volume_barcode_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'primary2_d_barcode_image' => null,
        'primary2_d_barcode_data' => null,
        'formatted_unique_id' => null,
        'gazetteer_codes' => null,
        'primary1_d_barcode_image' => null,
        'primary1_d_barcode_data' => null,
        'high_volume_barcode_image' => null,
        'high_volume_barcode_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'primary2_d_barcode_image' => 'Primary2DBarcodeImage',
        'primary2_d_barcode_data' => 'Primary2DBarcodeData',
        'formatted_unique_id' => 'FormattedUniqueId',
        'gazetteer_codes' => 'GazetteerCodes',
        'primary1_d_barcode_image' => 'Primary1DBarcodeImage',
        'primary1_d_barcode_data' => 'Primary1DBarcodeData',
        'high_volume_barcode_image' => 'HighVolumeBarcodeImage',
        'high_volume_barcode_data' => 'HighVolumeBarcodeData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'primary2_d_barcode_image' => 'setPrimary2DBarcodeImage',
        'primary2_d_barcode_data' => 'setPrimary2DBarcodeData',
        'formatted_unique_id' => 'setFormattedUniqueId',
        'gazetteer_codes' => 'setGazetteerCodes',
        'primary1_d_barcode_image' => 'setPrimary1DBarcodeImage',
        'primary1_d_barcode_data' => 'setPrimary1DBarcodeData',
        'high_volume_barcode_image' => 'setHighVolumeBarcodeImage',
        'high_volume_barcode_data' => 'setHighVolumeBarcodeData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'primary2_d_barcode_image' => 'getPrimary2DBarcodeImage',
        'primary2_d_barcode_data' => 'getPrimary2DBarcodeData',
        'formatted_unique_id' => 'getFormattedUniqueId',
        'gazetteer_codes' => 'getGazetteerCodes',
        'primary1_d_barcode_image' => 'getPrimary1DBarcodeImage',
        'primary1_d_barcode_data' => 'getPrimary1DBarcodeData',
        'high_volume_barcode_image' => 'getHighVolumeBarcodeImage',
        'high_volume_barcode_data' => 'getHighVolumeBarcodeData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['primary2_d_barcode_image'] = isset($data['primary2_d_barcode_image']) ? $data['primary2_d_barcode_image'] : null;
        $this->container['primary2_d_barcode_data'] = isset($data['primary2_d_barcode_data']) ? $data['primary2_d_barcode_data'] : null;
        $this->container['formatted_unique_id'] = isset($data['formatted_unique_id']) ? $data['formatted_unique_id'] : null;
        $this->container['gazetteer_codes'] = isset($data['gazetteer_codes']) ? $data['gazetteer_codes'] : null;
        $this->container['primary1_d_barcode_image'] = isset($data['primary1_d_barcode_image']) ? $data['primary1_d_barcode_image'] : null;
        $this->container['primary1_d_barcode_data'] = isset($data['primary1_d_barcode_data']) ? $data['primary1_d_barcode_data'] : null;
        $this->container['high_volume_barcode_image'] = isset($data['high_volume_barcode_image']) ? $data['high_volume_barcode_image'] : null;
        $this->container['high_volume_barcode_data'] = isset($data['high_volume_barcode_data']) ? $data['high_volume_barcode_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['primary2_d_barcode_image'] === null) {
            $invalidProperties[] = "'primary2_d_barcode_image' can't be null";
        }
        if ($this->container['primary2_d_barcode_data'] === null) {
            $invalidProperties[] = "'primary2_d_barcode_data' can't be null";
        }
        if ($this->container['formatted_unique_id'] === null) {
            $invalidProperties[] = "'formatted_unique_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets primary2_d_barcode_image
     *
     * @return string
     */
    public function getPrimary2DBarcodeImage()
    {
        return $this->container['primary2_d_barcode_image'];
    }

    /**
     * Sets primary2_d_barcode_image
     *
     * @param string $primary2_d_barcode_image Primary 2D Barcode Image <br />Base64 Encoded PNG Image of the 2D data matrix barcode.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeImage($primary2_d_barcode_image)
    {
        $this->container['primary2_d_barcode_image'] = $primary2_d_barcode_image;

        return $this;
    }

    /**
     * Gets primary2_d_barcode_data
     *
     * @return string
     */
    public function getPrimary2DBarcodeData()
    {
        return $this->container['primary2_d_barcode_data'];
    }

    /**
     * Sets primary2_d_barcode_data
     *
     * @param string $primary2_d_barcode_data Primary 2D Barcode Data - Base 64 Encoded <br />Data required to create your own 2D data matrix barcode. Please decode before use.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeData($primary2_d_barcode_data)
    {
        $this->container['primary2_d_barcode_data'] = $primary2_d_barcode_data;

        return $this;
    }

    /**
     * Gets formatted_unique_id
     *
     * @return string
     */
    public function getFormattedUniqueId()
    {
        return $this->container['formatted_unique_id'];
    }

    /**
     * Sets formatted_unique_id
     *
     * @param string $formatted_unique_id Formatted Unique Id <br />Label for 2D data matrix barcode.
     *
     * @return $this
     */
    public function setFormattedUniqueId($formatted_unique_id)
    {
        $this->container['formatted_unique_id'] = $formatted_unique_id;

        return $this;
    }

    /**
     * Gets gazetteer_codes
     *
     * @return \AdamToms\RoyalMailV4\Model\RoyalMailGazetteerCodes
     */
    public function getGazetteerCodes()
    {
        return $this->container['gazetteer_codes'];
    }

    /**
     * Sets gazetteer_codes
     *
     * @param \AdamToms\RoyalMailV4\Model\RoyalMailGazetteerCodes $gazetteer_codes gazetteer_codes
     *
     * @return $this
     */
    public function setGazetteerCodes($gazetteer_codes)
    {
        $this->container['gazetteer_codes'] = $gazetteer_codes;

        return $this;
    }

    /**
     * Gets primary1_d_barcode_image
     *
     * @return string
     */
    public function getPrimary1DBarcodeImage()
    {
        return $this->container['primary1_d_barcode_image'];
    }

    /**
     * Sets primary1_d_barcode_image
     *
     * @param string $primary1_d_barcode_image Primary 1D Barcode Image <br />Only populated where the service requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeImage($primary1_d_barcode_image)
    {
        $this->container['primary1_d_barcode_image'] = $primary1_d_barcode_image;

        return $this;
    }

    /**
     * Gets primary1_d_barcode_data
     *
     * @return string
     */
    public function getPrimary1DBarcodeData()
    {
        return $this->container['primary1_d_barcode_data'];
    }

    /**
     * Sets primary1_d_barcode_data
     *
     * @param string $primary1_d_barcode_data Primary 1D Barcode Data <br />Only populated where the service requires the barcode on the label. <br />Data required to create your own barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeData($primary1_d_barcode_data)
    {
        $this->container['primary1_d_barcode_data'] = $primary1_d_barcode_data;

        return $this;
    }

    /**
     * Gets high_volume_barcode_image
     *
     * @return string
     */
    public function getHighVolumeBarcodeImage()
    {
        return $this->container['high_volume_barcode_image'];
    }

    /**
     * Sets high_volume_barcode_image
     *
     * @param string $high_volume_barcode_image High Volume Barcode Image <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Base64 Encoded PNG Image of the barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeImage($high_volume_barcode_image)
    {
        $this->container['high_volume_barcode_image'] = $high_volume_barcode_image;

        return $this;
    }

    /**
     * Gets high_volume_barcode_data
     *
     * @return string
     */
    public function getHighVolumeBarcodeData()
    {
        return $this->container['high_volume_barcode_data'];
    }

    /**
     * Sets high_volume_barcode_data
     *
     * @param string $high_volume_barcode_data High Volume Barcode Data <br />Only populated where the service (Tracked High Volume) requires the barcode on the label. <br />Data required to create your own barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeData($high_volume_barcode_data)
    {
        $this->container['high_volume_barcode_data'] = $high_volume_barcode_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
