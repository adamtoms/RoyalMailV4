<?php
/**
 * Container
 *
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Model;

use \ArrayAccess;
use \AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * Container Class Doc Comment
 *
 * @category Class
 * @description Container
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Container implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Container';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'container_id' => 'string',
        'created_date_utc' => '\DateTime',
        'carrier_code' => 'string',
        'shipping_location_alias' => 'string',
        'shipping_location_id' => 'string',
        'total_weight' => 'double',
        'weight_unit_of_measure' => '\AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure',
        'total_shipments' => 'int',
        'total_packages' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'container_id' => null,
        'created_date_utc' => 'date-time',
        'carrier_code' => null,
        'shipping_location_alias' => null,
        'shipping_location_id' => null,
        'total_weight' => 'double',
        'weight_unit_of_measure' => null,
        'total_shipments' => 'int32',
        'total_packages' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container_id' => 'ContainerId',
        'created_date_utc' => 'CreatedDateUtc',
        'carrier_code' => 'CarrierCode',
        'shipping_location_alias' => 'ShippingLocationAlias',
        'shipping_location_id' => 'ShippingLocationId',
        'total_weight' => 'TotalWeight',
        'weight_unit_of_measure' => 'WeightUnitOfMeasure',
        'total_shipments' => 'TotalShipments',
        'total_packages' => 'TotalPackages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container_id' => 'setContainerId',
        'created_date_utc' => 'setCreatedDateUtc',
        'carrier_code' => 'setCarrierCode',
        'shipping_location_alias' => 'setShippingLocationAlias',
        'shipping_location_id' => 'setShippingLocationId',
        'total_weight' => 'setTotalWeight',
        'weight_unit_of_measure' => 'setWeightUnitOfMeasure',
        'total_shipments' => 'setTotalShipments',
        'total_packages' => 'setTotalPackages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container_id' => 'getContainerId',
        'created_date_utc' => 'getCreatedDateUtc',
        'carrier_code' => 'getCarrierCode',
        'shipping_location_alias' => 'getShippingLocationAlias',
        'shipping_location_id' => 'getShippingLocationId',
        'total_weight' => 'getTotalWeight',
        'weight_unit_of_measure' => 'getWeightUnitOfMeasure',
        'total_shipments' => 'getTotalShipments',
        'total_packages' => 'getTotalPackages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['container_id'] = isset($data['container_id']) ? $data['container_id'] : null;
        $this->container['created_date_utc'] = isset($data['created_date_utc']) ? $data['created_date_utc'] : null;
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['shipping_location_alias'] = isset($data['shipping_location_alias']) ? $data['shipping_location_alias'] : null;
        $this->container['shipping_location_id'] = isset($data['shipping_location_id']) ? $data['shipping_location_id'] : null;
        $this->container['total_weight'] = isset($data['total_weight']) ? $data['total_weight'] : null;
        $this->container['weight_unit_of_measure'] = isset($data['weight_unit_of_measure']) ? $data['weight_unit_of_measure'] : null;
        $this->container['total_shipments'] = isset($data['total_shipments']) ? $data['total_shipments'] : null;
        $this->container['total_packages'] = isset($data['total_packages']) ? $data['total_packages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container_id
     *
     * @return string
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string $container_id Container Id <br />The Container Identifier
     *
     * @return $this
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets created_date_utc
     *
     * @return \DateTime
     */
    public function getCreatedDateUtc()
    {
        return $this->container['created_date_utc'];
    }

    /**
     * Sets created_date_utc
     *
     * @param \DateTime $created_date_utc Created Date UTC
     *
     * @return $this
     */
    public function setCreatedDateUtc($created_date_utc)
    {
        $this->container['created_date_utc'] = $created_date_utc;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code Carrier Code <br />The carrier that the container is for. Only shipments created for this carrier can be added to this container.
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets shipping_location_alias
     *
     * @return string
     */
    public function getShippingLocationAlias()
    {
        return $this->container['shipping_location_alias'];
    }

    /**
     * Sets shipping_location_alias
     *
     * @param string $shipping_location_alias Shipping Location <br />The shipping location name/alias that this container is for. Only shipments created for this location can be added to this container.
     *
     * @return $this
     */
    public function setShippingLocationAlias($shipping_location_alias)
    {
        $this->container['shipping_location_alias'] = $shipping_location_alias;

        return $this;
    }

    /**
     * Gets shipping_location_id
     *
     * @return string
     */
    public function getShippingLocationId()
    {
        return $this->container['shipping_location_id'];
    }

    /**
     * Sets shipping_location_id
     *
     * @param string $shipping_location_id Shipping Location Id <br />The assigned Id for this location.
     *
     * @return $this
     */
    public function setShippingLocationId($shipping_location_id)
    {
        $this->container['shipping_location_id'] = $shipping_location_id;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return double
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param double $total_weight Total Weight <br />The total weight of all the shipments currently added to the container.
     *
     * @return $this
     */
    public function setTotalWeight($total_weight)
    {
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets weight_unit_of_measure
     *
     * @return \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure
     */
    public function getWeightUnitOfMeasure()
    {
        return $this->container['weight_unit_of_measure'];
    }

    /**
     * Sets weight_unit_of_measure
     *
     * @param \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure $weight_unit_of_measure weight_unit_of_measure
     *
     * @return $this
     */
    public function setWeightUnitOfMeasure($weight_unit_of_measure)
    {
        $this->container['weight_unit_of_measure'] = $weight_unit_of_measure;

        return $this;
    }

    /**
     * Gets total_shipments
     *
     * @return int
     */
    public function getTotalShipments()
    {
        return $this->container['total_shipments'];
    }

    /**
     * Sets total_shipments
     *
     * @param int $total_shipments Total Shipments <br />The total number of shipments in the container.
     *
     * @return $this
     */
    public function setTotalShipments($total_shipments)
    {
        $this->container['total_shipments'] = $total_shipments;

        return $this;
    }

    /**
     * Gets total_packages
     *
     * @return int
     */
    public function getTotalPackages()
    {
        return $this->container['total_packages'];
    }

    /**
     * Sets total_packages
     *
     * @param int $total_packages Total Packages <br />The total number of packages in the container
     *
     * @return $this
     */
    public function setTotalPackages($total_packages)
    {
        $this->container['total_packages'] = $total_packages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
