<?php
/**
 * ProductList
 *
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Model;

use \ArrayAccess;
use \AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ProductList Class Doc Comment
 *
 * @category Class
 * @description Product List
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_updated_date_utc' => '\DateTime',
        'last_updated_by' => 'string',
        'sku_code' => 'string',
        'description' => 'string',
        'value' => 'double',
        'weight' => 'string',
        'hs_code' => 'string',
        'country_of_origin' => 'string',
        'currency_code' => 'string',
        'weight_unit_of_measure' => '\AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'last_updated_date_utc' => 'date-time',
        'last_updated_by' => null,
        'sku_code' => null,
        'description' => null,
        'value' => 'double',
        'weight' => null,
        'hs_code' => null,
        'country_of_origin' => null,
        'currency_code' => null,
        'weight_unit_of_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_updated_date_utc' => 'LastUpdatedDateUtc',
        'last_updated_by' => 'LastUpdatedBy',
        'sku_code' => 'SkuCode',
        'description' => 'Description',
        'value' => 'Value',
        'weight' => 'Weight',
        'hs_code' => 'HSCode',
        'country_of_origin' => 'CountryOfOrigin',
        'currency_code' => 'CurrencyCode',
        'weight_unit_of_measure' => 'WeightUnitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_updated_date_utc' => 'setLastUpdatedDateUtc',
        'last_updated_by' => 'setLastUpdatedBy',
        'sku_code' => 'setSkuCode',
        'description' => 'setDescription',
        'value' => 'setValue',
        'weight' => 'setWeight',
        'hs_code' => 'setHsCode',
        'country_of_origin' => 'setCountryOfOrigin',
        'currency_code' => 'setCurrencyCode',
        'weight_unit_of_measure' => 'setWeightUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_updated_date_utc' => 'getLastUpdatedDateUtc',
        'last_updated_by' => 'getLastUpdatedBy',
        'sku_code' => 'getSkuCode',
        'description' => 'getDescription',
        'value' => 'getValue',
        'weight' => 'getWeight',
        'hs_code' => 'getHsCode',
        'country_of_origin' => 'getCountryOfOrigin',
        'currency_code' => 'getCurrencyCode',
        'weight_unit_of_measure' => 'getWeightUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_updated_date_utc'] = isset($data['last_updated_date_utc']) ? $data['last_updated_date_utc'] : null;
        $this->container['last_updated_by'] = isset($data['last_updated_by']) ? $data['last_updated_by'] : null;
        $this->container['sku_code'] = isset($data['sku_code']) ? $data['sku_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['hs_code'] = isset($data['hs_code']) ? $data['hs_code'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['weight_unit_of_measure'] = isset($data['weight_unit_of_measure']) ? $data['weight_unit_of_measure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku_code'] === null) {
            $invalidProperties[] = "'sku_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_updated_date_utc
     *
     * @return \DateTime
     */
    public function getLastUpdatedDateUtc()
    {
        return $this->container['last_updated_date_utc'];
    }

    /**
     * Sets last_updated_date_utc
     *
     * @param \DateTime $last_updated_date_utc Last Updated Date UTC
     *
     * @return $this
     */
    public function setLastUpdatedDateUtc($last_updated_date_utc)
    {
        $this->container['last_updated_date_utc'] = $last_updated_date_utc;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string $last_updated_by Last Updated By
     *
     * @return $this
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets sku_code
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string $sku_code Product SKU <br />Stock Keeping Unit Number.
     *
     * @return $this
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Product Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value Product Value <br />The value of an individual product.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight Weight <br />The weight of an individual product in the unit of measure specified by WeightUnitOfMeasure (defaults to KG). <br />             <br />Required for dutiable shipments. <br />The minimum weight allowed is 1 gram(for dutiable shipments only). <br />The maximum weight allowed is 1000 KG.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets hs_code
     *
     * @return string
     */
    public function getHsCode()
    {
        return $this->container['hs_code'];
    }

    /**
     * Sets hs_code
     *
     * @param string $hs_code HS Code <br />The Harmonized Commodity Description and Coding System Code. <br />At minimum, the 6 alpha numeric code is required when the HS Code is provided (some services/destinations may require 8). <br />Up to a 13 digit alpha numeric code can be used. <br />Dots and spaces in your code are also allowed. <br />Used by Customs to calculate potential duties / taxes. <br />             <br />Required by some carriers for dutiable shipments.
     *
     * @return $this
     */
    public function setHsCode($hs_code)
    {
        $this->container['hs_code'] = $hs_code;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string $country_of_origin Country of Origin / Manufacture <br />ISO Alpha-2 Country Code <br />             <br />Required by some carriers for dutiable shipments.
     *
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Currency Code <br />The currency code used for any monetary value related to the shipment. <br />3 letter ISO Currency Code <br />             <br />*Required if any monetary values other than zero are provided.*
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets weight_unit_of_measure
     *
     * @return \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure
     */
    public function getWeightUnitOfMeasure()
    {
        return $this->container['weight_unit_of_measure'];
    }

    /**
     * Sets weight_unit_of_measure
     *
     * @param \AdamToms\RoyalMailV4\Model\WeightUnitOfMeasure $weight_unit_of_measure weight_unit_of_measure
     *
     * @return $this
     */
    public function setWeightUnitOfMeasure($weight_unit_of_measure)
    {
        $this->container['weight_unit_of_measure'] = $weight_unit_of_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
