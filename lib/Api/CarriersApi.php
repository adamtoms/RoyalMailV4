<?php
/**
 * CarriersApi
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AdamToms\RoyalMailV4\ApiException;
use AdamToms\RoyalMailV4\Configuration;
use AdamToms\RoyalMailV4\HeaderSelector;
use AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * CarriersApi Class Doc Comment
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarriersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4CarriersCarrierCodeGet
     *
     * Get Carrier
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\CarrierDetailed
     */
    public function v4CarriersCarrierCodeGet($carrier_code)
    {
        list($response) = $this->v4CarriersCarrierCodeGetWithHttpInfo($carrier_code);
        return $response;
    }

    /**
     * Operation v4CarriersCarrierCodeGetWithHttpInfo
     *
     * Get Carrier
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\CarrierDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4CarriersCarrierCodeGetWithHttpInfo($carrier_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierDetailed';
        $request = $this->v4CarriersCarrierCodeGetRequest($carrier_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\CarrierDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4CarriersCarrierCodeGetAsync
     *
     * Get Carrier
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeGetAsync($carrier_code)
    {
        return $this->v4CarriersCarrierCodeGetAsyncWithHttpInfo($carrier_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4CarriersCarrierCodeGetAsyncWithHttpInfo
     *
     * Get Carrier
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeGetAsyncWithHttpInfo($carrier_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierDetailed';
        $request = $this->v4CarriersCarrierCodeGetRequest($carrier_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4CarriersCarrierCodeGet'
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4CarriersCarrierCodeGetRequest($carrier_code)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4CarriersCarrierCodeGet'
            );
        }

        $resourcePath = '/v4/carriers/{carrierCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4CarriersCarrierCodeServicesGet
     *
     * Get Carrier Services
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\CarrierService[]
     */
    public function v4CarriersCarrierCodeServicesGet($carrier_code)
    {
        list($response) = $this->v4CarriersCarrierCodeServicesGetWithHttpInfo($carrier_code);
        return $response;
    }

    /**
     * Operation v4CarriersCarrierCodeServicesGetWithHttpInfo
     *
     * Get Carrier Services
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\CarrierService[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4CarriersCarrierCodeServicesGetWithHttpInfo($carrier_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierService[]';
        $request = $this->v4CarriersCarrierCodeServicesGetRequest($carrier_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\CarrierService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4CarriersCarrierCodeServicesGetAsync
     *
     * Get Carrier Services
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeServicesGetAsync($carrier_code)
    {
        return $this->v4CarriersCarrierCodeServicesGetAsyncWithHttpInfo($carrier_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4CarriersCarrierCodeServicesGetAsyncWithHttpInfo
     *
     * Get Carrier Services
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeServicesGetAsyncWithHttpInfo($carrier_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierService[]';
        $request = $this->v4CarriersCarrierCodeServicesGetRequest($carrier_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4CarriersCarrierCodeServicesGet'
     *
     * @param  string $carrier_code Carrier Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4CarriersCarrierCodeServicesGetRequest($carrier_code)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4CarriersCarrierCodeServicesGet'
            );
        }

        $resourcePath = '/v4/carriers/{carrierCode}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4CarriersCarrierCodeServicesServiceCodePackageTypesGet
     *
     * Get Carrier Service Package Types
     *
     * @param  string $carrier_code Carrier Code. (required)
     * @param  string $service_code Service Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\CarrierServicePackageType[]
     */
    public function v4CarriersCarrierCodeServicesServiceCodePackageTypesGet($carrier_code, $service_code)
    {
        list($response) = $this->v4CarriersCarrierCodeServicesServiceCodePackageTypesGetWithHttpInfo($carrier_code, $service_code);
        return $response;
    }

    /**
     * Operation v4CarriersCarrierCodeServicesServiceCodePackageTypesGetWithHttpInfo
     *
     * Get Carrier Service Package Types
     *
     * @param  string $carrier_code Carrier Code. (required)
     * @param  string $service_code Service Code. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\CarrierServicePackageType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4CarriersCarrierCodeServicesServiceCodePackageTypesGetWithHttpInfo($carrier_code, $service_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierServicePackageType[]';
        $request = $this->v4CarriersCarrierCodeServicesServiceCodePackageTypesGetRequest($carrier_code, $service_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\CarrierServicePackageType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4CarriersCarrierCodeServicesServiceCodePackageTypesGetAsync
     *
     * Get Carrier Service Package Types
     *
     * @param  string $carrier_code Carrier Code. (required)
     * @param  string $service_code Service Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeServicesServiceCodePackageTypesGetAsync($carrier_code, $service_code)
    {
        return $this->v4CarriersCarrierCodeServicesServiceCodePackageTypesGetAsyncWithHttpInfo($carrier_code, $service_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4CarriersCarrierCodeServicesServiceCodePackageTypesGetAsyncWithHttpInfo
     *
     * Get Carrier Service Package Types
     *
     * @param  string $carrier_code Carrier Code. (required)
     * @param  string $service_code Service Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersCarrierCodeServicesServiceCodePackageTypesGetAsyncWithHttpInfo($carrier_code, $service_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\CarrierServicePackageType[]';
        $request = $this->v4CarriersCarrierCodeServicesServiceCodePackageTypesGetRequest($carrier_code, $service_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4CarriersCarrierCodeServicesServiceCodePackageTypesGet'
     *
     * @param  string $carrier_code Carrier Code. (required)
     * @param  string $service_code Service Code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4CarriersCarrierCodeServicesServiceCodePackageTypesGetRequest($carrier_code, $service_code)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4CarriersCarrierCodeServicesServiceCodePackageTypesGet'
            );
        }
        // verify the required parameter 'service_code' is set
        if ($service_code === null || (is_array($service_code) && count($service_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_code when calling v4CarriersCarrierCodeServicesServiceCodePackageTypesGet'
            );
        }

        $resourcePath = '/v4/carriers/{carrierCode}/services/{serviceCode}/packageTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }
        // path params
        if ($service_code !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceCode' . '}',
                ObjectSerializer::toPathValue($service_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4CarriersGet
     *
     * Get Carriers
     *
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\Carrier[]
     */
    public function v4CarriersGet()
    {
        list($response) = $this->v4CarriersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation v4CarriersGetWithHttpInfo
     *
     * Get Carriers
     *
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\Carrier[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4CarriersGetWithHttpInfo()
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\Carrier[]';
        $request = $this->v4CarriersGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\Carrier[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4CarriersGetAsync
     *
     * Get Carriers
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersGetAsync()
    {
        return $this->v4CarriersGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4CarriersGetAsyncWithHttpInfo
     *
     * Get Carriers
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4CarriersGetAsyncWithHttpInfo()
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\Carrier[]';
        $request = $this->v4CarriersGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4CarriersGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4CarriersGetRequest()
    {

        $resourcePath = '/v4/carriers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
