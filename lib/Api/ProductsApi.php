<?php
/**
 * ProductsApi
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AdamToms\RoyalMailV4\ApiException;
use AdamToms\RoyalMailV4\Configuration;
use AdamToms\RoyalMailV4\HeaderSelector;
use AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4ProductsGet
     *
     * Get Products
     *
     * @param  string $search_term Search Term (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ProductsSortBy $sort_by Sort By &lt;br /&gt;Default: Description (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ProductsPagedResponse
     */
    public function v4ProductsGet($search_term = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        list($response) = $this->v4ProductsGetWithHttpInfo($search_term, $page_size, $page_number, $sort_by, $sort_dir);
        return $response;
    }

    /**
     * Operation v4ProductsGetWithHttpInfo
     *
     * Get Products
     *
     * @param  string $search_term Search Term (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ProductsSortBy $sort_by Sort By &lt;br /&gt;Default: Description (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ProductsPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ProductsGetWithHttpInfo($search_term = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ProductsPagedResponse';
        $request = $this->v4ProductsGetRequest($search_term, $page_size, $page_number, $sort_by, $sort_dir);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ProductsPagedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ProductsGetAsync
     *
     * Get Products
     *
     * @param  string $search_term Search Term (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ProductsSortBy $sort_by Sort By &lt;br /&gt;Default: Description (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsGetAsync($search_term = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        return $this->v4ProductsGetAsyncWithHttpInfo($search_term, $page_size, $page_number, $sort_by, $sort_dir)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ProductsGetAsyncWithHttpInfo
     *
     * Get Products
     *
     * @param  string $search_term Search Term (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ProductsSortBy $sort_by Sort By &lt;br /&gt;Default: Description (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsGetAsyncWithHttpInfo($search_term = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ProductsPagedResponse';
        $request = $this->v4ProductsGetRequest($search_term, $page_size, $page_number, $sort_by, $sort_dir);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ProductsGet'
     *
     * @param  string $search_term Search Term (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ProductsSortBy $sort_by Sort By &lt;br /&gt;Default: Description (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ProductsGetRequest($search_term = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {

        $resourcePath = '/v4/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_term !== null) {
            $queryParams['searchTerm'] = ObjectSerializer::toQueryValue($search_term, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ProductsPost
     *
     * Add Product
     *
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\AddProductResponse
     */
    public function v4ProductsPost($body = null)
    {
        list($response) = $this->v4ProductsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation v4ProductsPostWithHttpInfo
     *
     * Add Product
     *
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\AddProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ProductsPostWithHttpInfo($body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\AddProductResponse';
        $request = $this->v4ProductsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\AddProductResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ProductsPostAsync
     *
     * Add Product
     *
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsPostAsync($body = null)
    {
        return $this->v4ProductsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ProductsPostAsyncWithHttpInfo
     *
     * Add Product
     *
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\AddProductResponse';
        $request = $this->v4ProductsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ProductsPost'
     *
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ProductsPostRequest($body = null)
    {

        $resourcePath = '/v4/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ProductsSkuCodeDelete
     *
     * Delete Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ProductsSkuCodeDelete($sku_code)
    {
        $this->v4ProductsSkuCodeDeleteWithHttpInfo($sku_code);
    }

    /**
     * Operation v4ProductsSkuCodeDeleteWithHttpInfo
     *
     * Delete Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ProductsSkuCodeDeleteWithHttpInfo($sku_code)
    {
        $returnType = '';
        $request = $this->v4ProductsSkuCodeDeleteRequest($sku_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v4ProductsSkuCodeDeleteAsync
     *
     * Delete Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodeDeleteAsync($sku_code)
    {
        return $this->v4ProductsSkuCodeDeleteAsyncWithHttpInfo($sku_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ProductsSkuCodeDeleteAsyncWithHttpInfo
     *
     * Delete Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodeDeleteAsyncWithHttpInfo($sku_code)
    {
        $returnType = '';
        $request = $this->v4ProductsSkuCodeDeleteRequest($sku_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ProductsSkuCodeDelete'
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ProductsSkuCodeDeleteRequest($sku_code)
    {
        // verify the required parameter 'sku_code' is set
        if ($sku_code === null || (is_array($sku_code) && count($sku_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_code when calling v4ProductsSkuCodeDelete'
            );
        }

        $resourcePath = '/v4/products/{skuCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sku_code !== null) {
            $resourcePath = str_replace(
                '{' . 'skuCode' . '}',
                ObjectSerializer::toPathValue($sku_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ProductsSkuCodeGet
     *
     * Get Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ProductList
     */
    public function v4ProductsSkuCodeGet($sku_code)
    {
        list($response) = $this->v4ProductsSkuCodeGetWithHttpInfo($sku_code);
        return $response;
    }

    /**
     * Operation v4ProductsSkuCodeGetWithHttpInfo
     *
     * Get Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ProductList, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ProductsSkuCodeGetWithHttpInfo($sku_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ProductList';
        $request = $this->v4ProductsSkuCodeGetRequest($sku_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ProductList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ProductsSkuCodeGetAsync
     *
     * Get Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodeGetAsync($sku_code)
    {
        return $this->v4ProductsSkuCodeGetAsyncWithHttpInfo($sku_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ProductsSkuCodeGetAsyncWithHttpInfo
     *
     * Get Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodeGetAsyncWithHttpInfo($sku_code)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ProductList';
        $request = $this->v4ProductsSkuCodeGetRequest($sku_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ProductsSkuCodeGet'
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ProductsSkuCodeGetRequest($sku_code)
    {
        // verify the required parameter 'sku_code' is set
        if ($sku_code === null || (is_array($sku_code) && count($sku_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_code when calling v4ProductsSkuCodeGet'
            );
        }

        $resourcePath = '/v4/products/{skuCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sku_code !== null) {
            $resourcePath = str_replace(
                '{' . 'skuCode' . '}',
                ObjectSerializer::toPathValue($sku_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ProductsSkuCodePut
     *
     * Update Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ProductsSkuCodePut($sku_code, $body = null)
    {
        $this->v4ProductsSkuCodePutWithHttpInfo($sku_code, $body);
    }

    /**
     * Operation v4ProductsSkuCodePutWithHttpInfo
     *
     * Update Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ProductsSkuCodePutWithHttpInfo($sku_code, $body = null)
    {
        $returnType = '';
        $request = $this->v4ProductsSkuCodePutRequest($sku_code, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ProductsSkuCodePutAsync
     *
     * Update Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodePutAsync($sku_code, $body = null)
    {
        return $this->v4ProductsSkuCodePutAsyncWithHttpInfo($sku_code, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ProductsSkuCodePutAsyncWithHttpInfo
     *
     * Update Product
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ProductsSkuCodePutAsyncWithHttpInfo($sku_code, $body = null)
    {
        $returnType = '';
        $request = $this->v4ProductsSkuCodePutRequest($sku_code, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ProductsSkuCodePut'
     *
     * @param  string $sku_code SKU Code &lt;br /&gt;The SKU Code (Stock Keeping Unit Number assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\Product $body Product details (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ProductsSkuCodePutRequest($sku_code, $body = null)
    {
        // verify the required parameter 'sku_code' is set
        if ($sku_code === null || (is_array($sku_code) && count($sku_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_code when calling v4ProductsSkuCodePut'
            );
        }

        $resourcePath = '/v4/products/{skuCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sku_code !== null) {
            $resourcePath = str_replace(
                '{' . 'skuCode' . '}',
                ObjectSerializer::toPathValue($sku_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
