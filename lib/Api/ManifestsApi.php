<?php
/**
 * ManifestsApi
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AdamToms\RoyalMailV4\ApiException;
use AdamToms\RoyalMailV4\Configuration;
use AdamToms\RoyalMailV4\HeaderSelector;
use AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ManifestsApi Class Doc Comment
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManifestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4ManifestsCarrierCodeGet
     *
     * Get Manifests
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  string $shipping_account_id Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  \DateTime $date_from Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $date_to Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ManifestsPagedResponse
     */
    public function v4ManifestsCarrierCodeGet($carrier_code, $shipping_location_id = null, $shipping_account_id = null, $date_from = null, $date_to = null, $page_size = '100', $page_number = '1')
    {
        list($response) = $this->v4ManifestsCarrierCodeGetWithHttpInfo($carrier_code, $shipping_location_id, $shipping_account_id, $date_from, $date_to, $page_size, $page_number);
        return $response;
    }

    /**
     * Operation v4ManifestsCarrierCodeGetWithHttpInfo
     *
     * Get Manifests
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  string $shipping_account_id Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  \DateTime $date_from Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $date_to Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ManifestsPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ManifestsCarrierCodeGetWithHttpInfo($carrier_code, $shipping_location_id = null, $shipping_account_id = null, $date_from = null, $date_to = null, $page_size = '100', $page_number = '1')
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestsPagedResponse';
        $request = $this->v4ManifestsCarrierCodeGetRequest($carrier_code, $shipping_location_id, $shipping_account_id, $date_from, $date_to, $page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ManifestsPagedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ManifestsCarrierCodeGetAsync
     *
     * Get Manifests
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  string $shipping_account_id Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  \DateTime $date_from Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $date_to Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeGetAsync($carrier_code, $shipping_location_id = null, $shipping_account_id = null, $date_from = null, $date_to = null, $page_size = '100', $page_number = '1')
    {
        return $this->v4ManifestsCarrierCodeGetAsyncWithHttpInfo($carrier_code, $shipping_location_id, $shipping_account_id, $date_from, $date_to, $page_size, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ManifestsCarrierCodeGetAsyncWithHttpInfo
     *
     * Get Manifests
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  string $shipping_account_id Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  \DateTime $date_from Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $date_to Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeGetAsyncWithHttpInfo($carrier_code, $shipping_location_id = null, $shipping_account_id = null, $date_from = null, $date_to = null, $page_size = '100', $page_number = '1')
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestsPagedResponse';
        $request = $this->v4ManifestsCarrierCodeGetRequest($carrier_code, $shipping_location_id, $shipping_account_id, $date_from, $date_to, $page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ManifestsCarrierCodeGet'
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  string $shipping_account_id Shipping Account Id &lt;br /&gt;PRO SHIPPING Shipping Account Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  \DateTime $date_from Date From &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  \DateTime $date_to Date To &lt;br /&gt;Defaults to Today&#x27;s date if not provided. &lt;br /&gt;Format: YYYY-MM-DD (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ManifestsCarrierCodeGetRequest($carrier_code, $shipping_location_id = null, $shipping_account_id = null, $date_from = null, $date_to = null, $page_size = '100', $page_number = '1')
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4ManifestsCarrierCodeGet'
            );
        }

        $resourcePath = '/v4/manifests/{carrierCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipping_location_id !== null) {
            $queryParams['shippingLocationId'] = ObjectSerializer::toQueryValue($shipping_location_id, null);
        }
        // query params
        if ($shipping_account_id !== null) {
            $queryParams['shippingAccountId'] = ObjectSerializer::toQueryValue($shipping_account_id, null);
        }
        // query params
        if ($date_from !== null) {
            $queryParams['dateFrom'] = ObjectSerializer::toQueryValue($date_from, 'date');
        }
        // query params
        if ($date_to !== null) {
            $queryParams['dateTo'] = ObjectSerializer::toQueryValue($date_to, 'date');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }

        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberGet
     *
     * Print Manifest
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ManifestResponse
     */
    public function v4ManifestsCarrierCodeManifestNumberGet($carrier_code, $manifest_number)
    {
        list($response) = $this->v4ManifestsCarrierCodeManifestNumberGetWithHttpInfo($carrier_code, $manifest_number);
        return $response;
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberGetWithHttpInfo
     *
     * Print Manifest
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ManifestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ManifestsCarrierCodeManifestNumberGetWithHttpInfo($carrier_code, $manifest_number)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestResponse';
        $request = $this->v4ManifestsCarrierCodeManifestNumberGetRequest($carrier_code, $manifest_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ManifestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberGetAsync
     *
     * Print Manifest
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeManifestNumberGetAsync($carrier_code, $manifest_number)
    {
        return $this->v4ManifestsCarrierCodeManifestNumberGetAsyncWithHttpInfo($carrier_code, $manifest_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberGetAsyncWithHttpInfo
     *
     * Print Manifest
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeManifestNumberGetAsyncWithHttpInfo($carrier_code, $manifest_number)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestResponse';
        $request = $this->v4ManifestsCarrierCodeManifestNumberGetRequest($carrier_code, $manifest_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ManifestsCarrierCodeManifestNumberGet'
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ManifestsCarrierCodeManifestNumberGetRequest($carrier_code, $manifest_number)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4ManifestsCarrierCodeManifestNumberGet'
            );
        }
        // verify the required parameter 'manifest_number' is set
        if ($manifest_number === null || (is_array($manifest_number) && count($manifest_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_number when calling v4ManifestsCarrierCodeManifestNumberGet'
            );
        }

        $resourcePath = '/v4/manifests/{carrierCode}/{manifestNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }
        // path params
        if ($manifest_number !== null) {
            $resourcePath = str_replace(
                '{' . 'manifestNumber' . '}',
                ObjectSerializer::toPathValue($manifest_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberShipmentsGet
     *
     * Get Manifest Details
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ManifestDetailsResponse
     */
    public function v4ManifestsCarrierCodeManifestNumberShipmentsGet($carrier_code, $manifest_number)
    {
        list($response) = $this->v4ManifestsCarrierCodeManifestNumberShipmentsGetWithHttpInfo($carrier_code, $manifest_number);
        return $response;
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberShipmentsGetWithHttpInfo
     *
     * Get Manifest Details
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ManifestDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ManifestsCarrierCodeManifestNumberShipmentsGetWithHttpInfo($carrier_code, $manifest_number)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestDetailsResponse';
        $request = $this->v4ManifestsCarrierCodeManifestNumberShipmentsGetRequest($carrier_code, $manifest_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ManifestDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberShipmentsGetAsync
     *
     * Get Manifest Details
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeManifestNumberShipmentsGetAsync($carrier_code, $manifest_number)
    {
        return $this->v4ManifestsCarrierCodeManifestNumberShipmentsGetAsyncWithHttpInfo($carrier_code, $manifest_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ManifestsCarrierCodeManifestNumberShipmentsGetAsyncWithHttpInfo
     *
     * Get Manifest Details
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodeManifestNumberShipmentsGetAsyncWithHttpInfo($carrier_code, $manifest_number)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestDetailsResponse';
        $request = $this->v4ManifestsCarrierCodeManifestNumberShipmentsGetRequest($carrier_code, $manifest_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ManifestsCarrierCodeManifestNumberShipmentsGet'
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  string $manifest_number Manifest Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ManifestsCarrierCodeManifestNumberShipmentsGetRequest($carrier_code, $manifest_number)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4ManifestsCarrierCodeManifestNumberShipmentsGet'
            );
        }
        // verify the required parameter 'manifest_number' is set
        if ($manifest_number === null || (is_array($manifest_number) && count($manifest_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_number when calling v4ManifestsCarrierCodeManifestNumberShipmentsGet'
            );
        }

        $resourcePath = '/v4/manifests/{carrierCode}/{manifestNumber}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }
        // path params
        if ($manifest_number !== null) {
            $resourcePath = str_replace(
                '{' . 'manifestNumber' . '}',
                ObjectSerializer::toPathValue($manifest_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ManifestsCarrierCodePost
     *
     * Manifest Shipments
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  \AdamToms\RoyalMailV4\Model\ManifestRequest $body Manifest Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ManifestResponse[]
     */
    public function v4ManifestsCarrierCodePost($carrier_code, $body = null)
    {
        list($response) = $this->v4ManifestsCarrierCodePostWithHttpInfo($carrier_code, $body);
        return $response;
    }

    /**
     * Operation v4ManifestsCarrierCodePostWithHttpInfo
     *
     * Manifest Shipments
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  \AdamToms\RoyalMailV4\Model\ManifestRequest $body Manifest Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ManifestResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ManifestsCarrierCodePostWithHttpInfo($carrier_code, $body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestResponse[]';
        $request = $this->v4ManifestsCarrierCodePostRequest($carrier_code, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ManifestResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ManifestsCarrierCodePostAsync
     *
     * Manifest Shipments
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  \AdamToms\RoyalMailV4\Model\ManifestRequest $body Manifest Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodePostAsync($carrier_code, $body = null)
    {
        return $this->v4ManifestsCarrierCodePostAsyncWithHttpInfo($carrier_code, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ManifestsCarrierCodePostAsyncWithHttpInfo
     *
     * Manifest Shipments
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  \AdamToms\RoyalMailV4\Model\ManifestRequest $body Manifest Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ManifestsCarrierCodePostAsyncWithHttpInfo($carrier_code, $body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ManifestResponse[]';
        $request = $this->v4ManifestsCarrierCodePostRequest($carrier_code, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ManifestsCarrierCodePost'
     *
     * @param  string $carrier_code Carrier Code (required)
     * @param  \AdamToms\RoyalMailV4\Model\ManifestRequest $body Manifest Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ManifestsCarrierCodePostRequest($carrier_code, $body = null)
    {
        // verify the required parameter 'carrier_code' is set
        if ($carrier_code === null || (is_array($carrier_code) && count($carrier_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_code when calling v4ManifestsCarrierCodePost'
            );
        }

        $resourcePath = '/v4/manifests/{carrierCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier_code !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierCode' . '}',
                ObjectSerializer::toPathValue($carrier_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
