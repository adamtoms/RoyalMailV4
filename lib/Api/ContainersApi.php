<?php
/**
 * ContainersApi
 * PHP version 5
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PRO SHIPPING API
 *
 * # Introduction Here you will find requirements for integrating with PRO SHIPPING API.  The documentation specifically covers how the API can be used by business customers to conduct shipping activity with available carriers and provides the technical information to build this integration. The API allows customers to create and manage shipments, produce labels, customs documentation, and collection manifests, retrieve reference data such as carriers and countries, and maintain their own data such as shipping account details.  Pro Shipping API is a fully RESTful service implemented using JSON messaging. You, as the customer are responsible for sending JSON messages and for maintaining the capability of receiving JSON messages in the format described in this specification. Request and response examples for each API service are included in this specification.  # Authentication  The PRO SHIPPING API uses OAuth2 authentication.  To request the authorization token you need to create API credentials (Client ID and Secret) on the system first. If you have not done it already, log into your account and go to API Credentials or follow the link [add a link here with the path to the API Credentials menu]. Use the credentials to retrieve the authorization token.  Note: Make sure you copy the Secret and keep it secure as you won't be able to view it again on the system.  <!-- ReDoc-Inject: <SecurityDefinitions /> -->
 *
 * OpenAPI spec version: v4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AdamToms\RoyalMailV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AdamToms\RoyalMailV4\ApiException;
use AdamToms\RoyalMailV4\Configuration;
use AdamToms\RoyalMailV4\HeaderSelector;
use AdamToms\RoyalMailV4\ObjectSerializer;

/**
 * ContainersApi Class Doc Comment
 *
 * @category Class
 * @package  AdamToms\RoyalMailV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContainersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4ContainersContainerIdDelete
     *
     * Delete Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ContainersContainerIdDelete($container_id)
    {
        $this->v4ContainersContainerIdDeleteWithHttpInfo($container_id);
    }

    /**
     * Operation v4ContainersContainerIdDeleteWithHttpInfo
     *
     * Delete Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ContainersContainerIdDeleteWithHttpInfo($container_id)
    {
        $returnType = '';
        $request = $this->v4ContainersContainerIdDeleteRequest($container_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v4ContainersContainerIdDeleteAsync
     *
     * Delete Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdDeleteAsync($container_id)
    {
        return $this->v4ContainersContainerIdDeleteAsyncWithHttpInfo($container_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ContainersContainerIdDeleteAsyncWithHttpInfo
     *
     * Delete Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdDeleteAsyncWithHttpInfo($container_id)
    {
        $returnType = '';
        $request = $this->v4ContainersContainerIdDeleteRequest($container_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ContainersContainerIdDelete'
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ContainersContainerIdDeleteRequest($container_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling v4ContainersContainerIdDelete'
            );
        }

        $resourcePath = '/v4/containers/{containerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'containerId' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ContainersContainerIdGet
     *
     * Get Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you) for the container. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\Container
     */
    public function v4ContainersContainerIdGet($container_id)
    {
        list($response) = $this->v4ContainersContainerIdGetWithHttpInfo($container_id);
        return $response;
    }

    /**
     * Operation v4ContainersContainerIdGetWithHttpInfo
     *
     * Get Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you) for the container. (required)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\Container, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ContainersContainerIdGetWithHttpInfo($container_id)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\Container';
        $request = $this->v4ContainersContainerIdGetRequest($container_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\Container',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ContainersContainerIdGetAsync
     *
     * Get Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you) for the container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdGetAsync($container_id)
    {
        return $this->v4ContainersContainerIdGetAsyncWithHttpInfo($container_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ContainersContainerIdGetAsyncWithHttpInfo
     *
     * Get Container
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you) for the container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdGetAsyncWithHttpInfo($container_id)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\Container';
        $request = $this->v4ContainersContainerIdGetRequest($container_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ContainersContainerIdGet'
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you) for the container. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ContainersContainerIdGetRequest($container_id)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling v4ContainersContainerIdGet'
            );
        }

        $resourcePath = '/v4/containers/{containerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'containerId' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ContainersContainerIdPut
     *
     * Add/Remove Shipments
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\UpdateContainerRequest $body Update Container Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4ContainersContainerIdPut($container_id, $body = null)
    {
        $this->v4ContainersContainerIdPutWithHttpInfo($container_id, $body);
    }

    /**
     * Operation v4ContainersContainerIdPutWithHttpInfo
     *
     * Add/Remove Shipments
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\UpdateContainerRequest $body Update Container Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ContainersContainerIdPutWithHttpInfo($container_id, $body = null)
    {
        $returnType = '';
        $request = $this->v4ContainersContainerIdPutRequest($container_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ContainersContainerIdPutAsync
     *
     * Add/Remove Shipments
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\UpdateContainerRequest $body Update Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdPutAsync($container_id, $body = null)
    {
        return $this->v4ContainersContainerIdPutAsyncWithHttpInfo($container_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ContainersContainerIdPutAsyncWithHttpInfo
     *
     * Add/Remove Shipments
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\UpdateContainerRequest $body Update Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersContainerIdPutAsyncWithHttpInfo($container_id, $body = null)
    {
        $returnType = '';
        $request = $this->v4ContainersContainerIdPutRequest($container_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ContainersContainerIdPut'
     *
     * @param  string $container_id Container Id &lt;br /&gt;PRO SHIPPING Container Id (assigned by PRO SHIPPING) or Alias (assigned by you). (required)
     * @param  \AdamToms\RoyalMailV4\Model\UpdateContainerRequest $body Update Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ContainersContainerIdPutRequest($container_id, $body = null)
    {
        // verify the required parameter 'container_id' is set
        if ($container_id === null || (is_array($container_id) && count($container_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_id when calling v4ContainersContainerIdPut'
            );
        }

        $resourcePath = '/v4/containers/{containerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                '{' . 'containerId' . '}',
                ObjectSerializer::toPathValue($container_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ContainersGet
     *
     * Get Containers
     *
     * @param  string $carrier_code CarrierCode &lt;br /&gt;Filter by carrier (optional)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ContainersSortBy $sort_by Sort By &lt;br /&gt;Default: CreatedDateUtc (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\ContainersPagedResponse
     */
    public function v4ContainersGet($carrier_code = null, $shipping_location_id = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        list($response) = $this->v4ContainersGetWithHttpInfo($carrier_code, $shipping_location_id, $page_size, $page_number, $sort_by, $sort_dir);
        return $response;
    }

    /**
     * Operation v4ContainersGetWithHttpInfo
     *
     * Get Containers
     *
     * @param  string $carrier_code CarrierCode &lt;br /&gt;Filter by carrier (optional)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ContainersSortBy $sort_by Sort By &lt;br /&gt;Default: CreatedDateUtc (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\ContainersPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ContainersGetWithHttpInfo($carrier_code = null, $shipping_location_id = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ContainersPagedResponse';
        $request = $this->v4ContainersGetRequest($carrier_code, $shipping_location_id, $page_size, $page_number, $sort_by, $sort_dir);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ContainersPagedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ContainersGetAsync
     *
     * Get Containers
     *
     * @param  string $carrier_code CarrierCode &lt;br /&gt;Filter by carrier (optional)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ContainersSortBy $sort_by Sort By &lt;br /&gt;Default: CreatedDateUtc (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersGetAsync($carrier_code = null, $shipping_location_id = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        return $this->v4ContainersGetAsyncWithHttpInfo($carrier_code, $shipping_location_id, $page_size, $page_number, $sort_by, $sort_dir)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ContainersGetAsyncWithHttpInfo
     *
     * Get Containers
     *
     * @param  string $carrier_code CarrierCode &lt;br /&gt;Filter by carrier (optional)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ContainersSortBy $sort_by Sort By &lt;br /&gt;Default: CreatedDateUtc (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersGetAsyncWithHttpInfo($carrier_code = null, $shipping_location_id = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\ContainersPagedResponse';
        $request = $this->v4ContainersGetRequest($carrier_code, $shipping_location_id, $page_size, $page_number, $sort_by, $sort_dir);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ContainersGet'
     *
     * @param  string $carrier_code CarrierCode &lt;br /&gt;Filter by carrier (optional)
     * @param  string $shipping_location_id Shipping Location Id &lt;br /&gt;PRO SHIPPING Shipping Location Id (assigned by PRO SHIPPING) or Alias (assigned by you). &lt;br /&gt;Filter by shipping location (optional)
     * @param  int $page_size The maximum number of records per page. (optional, default to 100)
     * @param  int $page_number The number of the requested page, starting at 1. (optional, default to 1)
     * @param  \AdamToms\RoyalMailV4\Model\ContainersSortBy $sort_by Sort By &lt;br /&gt;Default: CreatedDateUtc (optional)
     * @param  \AdamToms\RoyalMailV4\Model\OrderDirection $sort_dir Sort Direction &lt;br /&gt;Default: Ascending (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ContainersGetRequest($carrier_code = null, $shipping_location_id = null, $page_size = '100', $page_number = '1', $sort_by = null, $sort_dir = null)
    {

        $resourcePath = '/v4/containers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier_code !== null) {
            $queryParams['carrierCode'] = ObjectSerializer::toQueryValue($carrier_code, null);
        }
        // query params
        if ($shipping_location_id !== null) {
            $queryParams['shippingLocationId'] = ObjectSerializer::toQueryValue($shipping_location_id, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4ContainersPost
     *
     * Add Container
     *
     * @param  \AdamToms\RoyalMailV4\Model\AddContainerRequest $body Add Container Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AdamToms\RoyalMailV4\Model\AddContainerResponse
     */
    public function v4ContainersPost($body = null)
    {
        list($response) = $this->v4ContainersPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation v4ContainersPostWithHttpInfo
     *
     * Add Container
     *
     * @param  \AdamToms\RoyalMailV4\Model\AddContainerRequest $body Add Container Request (optional)
     *
     * @throws \AdamToms\RoyalMailV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AdamToms\RoyalMailV4\Model\AddContainerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4ContainersPostWithHttpInfo($body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\AddContainerResponse';
        $request = $this->v4ContainersPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\AddContainerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AdamToms\RoyalMailV4\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4ContainersPostAsync
     *
     * Add Container
     *
     * @param  \AdamToms\RoyalMailV4\Model\AddContainerRequest $body Add Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersPostAsync($body = null)
    {
        return $this->v4ContainersPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4ContainersPostAsyncWithHttpInfo
     *
     * Add Container
     *
     * @param  \AdamToms\RoyalMailV4\Model\AddContainerRequest $body Add Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4ContainersPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\AdamToms\RoyalMailV4\Model\AddContainerResponse';
        $request = $this->v4ContainersPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4ContainersPost'
     *
     * @param  \AdamToms\RoyalMailV4\Model\AddContainerRequest $body Add Container Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v4ContainersPostRequest($body = null)
    {

        $resourcePath = '/v4/containers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
